name: Build
on:
  - push
  - release
  - pull_request
  - workflow_dispatch

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - arch: amd64
            runs-on: windows-latest
          - arch: arm64
            runs-on: windows-11-arm
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.x'
          
      - name: Install meson and ninja
        run: pip install meson ninja

      - name: Setup MS dev commands
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Meson setup
        shell: pwsh
        run: |
          meson setup build/

      - name: Meson compile
        shell: pwsh
        run: |
          meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-windows-${{ matrix.arch }}
          path: |
            build/*.dll

  build-linux:
    strategy:
      matrix:
        include:
          - arch: x86_64
            libc: glibc
            runs-on: ubuntu-latest
            container: ubuntu:22.04
          - arch: aarch64
            libc: glibc
            runs-on: ubuntu-22.04-arm
            container: ubuntu:22.04
          - arch: x86_64
            libc: musl
            runs-on: ubuntu-latest
            container: ubuntu:22.04
          - arch: aarch64
            libc: musl
            runs-on: ubuntu-22.04-arm
            container: ubuntu:22.04
    runs-on: ${{ matrix.runs-on }}
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu/glibc)
        if: matrix.libc == 'glibc'
        env:
          DEBIAN_FRONTEND: noninteractive
          TZ: UTC
        run: |
          apt-get update
          apt-get install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test -y
          apt-get update
          apt-get install -y python3 python3-pip git build-essential pkg-config gcc-13 g++-13
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
          python3 -m pip install meson ninja

      - name: Install dependencies and Zig (Ubuntu/musl)
        if: matrix.libc == 'musl'
        env:
          DEBIAN_FRONTEND: noninteractive
          TZ: UTC
        run: |
          apt-get update
          apt-get install -y software-properties-common curl xz-utils
          apt-get install -y python3 python3-pip git build-essential pkg-config
          python3 -m pip install meson ninja
          # Install Zig
          ZIG_VERSION="0.13.0"
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ZIG_ARCH="x86_64"
          else
            ZIG_ARCH="aarch64"
          fi
          curl -L "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-${ZIG_ARCH}-${ZIG_VERSION}.tar.xz" -o zig.tar.xz
          tar -xf zig.tar.xz
          mv zig-linux-${ZIG_ARCH}-${ZIG_VERSION} /usr/local/zig
          echo "/usr/local/zig" >> $GITHUB_PATH

      - name: Set musl compiler environment with Zig
        if: matrix.libc == 'musl'
        run: |
          mkdir -p /usr/local/bin
          
          cat > /usr/local/bin/zig-cc << 'EOF'
          #!/bin/bash
          exec /usr/local/zig/zig cc -target ${{ matrix.arch }}-linux-musl -static "$@"
          EOF
          chmod +x /usr/local/bin/zig-cc
          
          cat > /usr/local/bin/zig-cxx << 'EOF'
          #!/bin/bash
          exec /usr/local/zig/zig c++ -target ${{ matrix.arch }}-linux-musl -static "$@"
          EOF
          chmod +x /usr/local/bin/zig-cxx
          
          echo "CC=/usr/local/bin/zig-cc" >> $GITHUB_ENV
          echo "CXX=/usr/local/bin/zig-cxx" >> $GITHUB_ENV

      - name: Meson setup
        run: meson setup build/

      - name: Meson compile
        run: meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-${{ matrix.arch }}-${{ matrix.libc }}
          path: |
            build/*.so

  build-macos:
    strategy:
      matrix:
        include:
          - arch: x86_64
            runs-on: macos-13
          - arch: arm64
            runs-on: macos-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.x'

      - name: Install dependencies
        run: |
          python3 -m pip install meson ninja
          brew install llvm
          
      - name: Set compiler environment
        run: |
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix llvm)/bin:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix llvm)/lib -Wl,-rpath,$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix llvm)/include" >> $GITHUB_ENV

      - name: Meson setup
        run: meson setup build/

      - name: Meson compile
        run: |
          meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-${{ matrix.arch }}
          path: |
            build/*.dylib